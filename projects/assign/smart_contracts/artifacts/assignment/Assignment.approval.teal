#pragma version 10

smart_contracts.assignment.contract.Assignment.approval_program:
    intcblock 0 1
    bytecblock "counter" 0x151f7c75
    txn ApplicationID
    bnz main_after_if_else@2
    callsub __init__

main_after_if_else@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.assignment.contract.Assignment.__init__() -> void:
__init__:
    // smart_contracts/assignment/contract.py:7
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/assignment/contract.py:8
    // self.counter = UInt64(0)
    bytec_0 // "counter"
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts.assignment.contract.Assignment.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/assignment/contract.py:5
    // class Assignment(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@7
    pushbytess 0xc9c9375a 0x4a325901 0xdae6e4ce // method "get_counter()uint64", method "increment()uint64", method "decrement()uint64"
    txna ApplicationArgs 0
    match __puya_arc4_router___get_counter_route@2 __puya_arc4_router___increment_route@3 __puya_arc4_router___decrement_route@4
    intc_0 // 0
    retsub

__puya_arc4_router___get_counter_route@2:
    // smart_contracts/assignment/contract.py:10
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_counter
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___increment_route@3:
    // smart_contracts/assignment/contract.py:14
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub increment
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___decrement_route@4:
    // smart_contracts/assignment/contract.py:19
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub decrement
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@7:
    // smart_contracts/assignment/contract.py:5
    // class Assignment(ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@11:
    // smart_contracts/assignment/contract.py:5
    // class Assignment(ARC4Contract):
    intc_0 // 0
    retsub


// smart_contracts.assignment.contract.Assignment.get_counter() -> uint64:
get_counter:
    // smart_contracts/assignment/contract.py:10-11
    // @abimethod()
    // def get_counter(self) -> UInt64:
    proto 0 1
    // smart_contracts/assignment/contract.py:12
    // return self.counter
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    retsub


// smart_contracts.assignment.contract.Assignment.increment() -> uint64:
increment:
    // smart_contracts/assignment/contract.py:14-15
    // @abimethod()
    // def increment(self) -> UInt64:
    proto 0 1
    // smart_contracts/assignment/contract.py:16
    // self.counter += 1
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    intc_1 // 1
    +
    bytec_0 // "counter"
    swap
    app_global_put
    // smart_contracts/assignment/contract.py:17
    // return self.counter
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    retsub


// smart_contracts.assignment.contract.Assignment.decrement() -> uint64:
decrement:
    // smart_contracts/assignment/contract.py:19-20
    // @abimethod()
    // def decrement(self) -> UInt64:
    proto 0 1
    // smart_contracts/assignment/contract.py:21
    // self.counter -= 1
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    intc_1 // 1
    -
    bytec_0 // "counter"
    swap
    app_global_put
    // smart_contracts/assignment/contract.py:22
    // return self.counter
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    retsub
